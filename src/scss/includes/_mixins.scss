//----------------------------------------------------------
//                       Opacity
//----------------------------------------------------------
// Sets the opacity of specified element.
//
@mixin opacity($o) {
    -webkit-opacity: $o;
    -moz-opacity: $o;
    opacity: $o;
}
//----------------------------------------------------------
//                       Clearfix
//----------------------------------------------------------
@mixin clearfix {
    &:before,
    &:after{
        content: '';
        display: table;
    }
    &:after{
        clear: both;
    }
}
//--------------------------------------------------------------------------
//                          TRIANGLE BORDER
//--------------------------------------------------------------------------
//
//  Creates a triangle border
//
//  Parameters:
//      @dir - direction of triangle
//      @w   - width of triangle
//      @h:  - height of triangle
//      @clr - color of triangle
//
@mixin triangle($dir, $w, $h, $clr) {
    width: 0;
    height: 0;
    border-style: solid;

    @if $dir == top {
        border-width: 0 $w/2 $h $w/2;
        border-color: transparent transparent $clr transparent;
    }
    @else if $dir == bottom {
        border-width: $h $w/2 0 $w/2;
        border-color: $clr transparent transparent transparent;
    }
    @else if $dir == left {
        border-width: $h/2 $w $h/2 0;
        border-color: transparent $clr transparent transparent;
    }
    @else if $dir == right {
        border-width: $h/2 0 $h/2 $w;
        border-color: transparent transparent transparent $clr;
    }
    @else if $dir == top_left {
        border-width: $w $w 0 0;
        border-color: $clr transparent transparent transparent;
    }
    @else if $dir == top_right {
        border-width: 0 $w $w 0;
        border-color: transparent $clr transparent transparent;
    }
    @else if $dir == bottom_right {
        border-width: 0 0 $w $w;
        border-color: transparent transparent $clr transparent;
    }
    @else if $dir == bottom_left {
        border-width: $w 0 0 $w;
        border-color: transparent transparent transparent $clr;
    }
}

//----------------------------------------------------------
//                      Box Sizing
//----------------------------------------------------------
// Sets the box-sizing of element
//
@mixin box-sizing($bs) {
    -moz-box-sizing: $bs;
    -webkit-box-sizing: $bs;
    box-sizing: $bs;
}

//----------------------------------------------------------
//                      Border Radius
//----------------------------------------------------------
// Sets the border radius of element
//
@mixin border-radius($bs) {
    -webkit-border-radius: $bs;
    -moz-border-radius: $bs;
    border-radius: $bs;
}

//----------------------------------------------------------
//                       Transform
//----------------------------------------------------------
// Sets the transform of element
//
@mixin transform($trfm) {
    -moz-transform: $trfm; -ms-transform: $trfm;
    -o-transform: $trfm; -webkit-transform: $trfm;
    transform: $trfm;
}

//----------------------------------------------------------
//                    Transform Origin
//----------------------------------------------------------
// Sets the transform origin of element
//
@mixin transform-origin($trfm-o) {
    -moz-transform-origin: $trfm-o; -ms-transform-origin: $trfm-o;
    -o-transform-origin: $trfm-o; -webkit-transform-origin: $trfm-o;
    transform-origin: $trfm-o;
}

//----------------------------------------------------------
//                      Transition
//----------------------------------------------------------
// Sets the transition of element
//
@mixin transition($trsn) {
    -moz-transition: $trsn;
    -o-transition: $trsn;
    -webkit-transition: $trsn;
    transition: $trsn;
}

//----------------------------------------------------------
//                   Transition Delay
//----------------------------------------------------------
// Sets the transition delay of element
//
@mixin transition-delay($trsn-d) {
    -moz-transition-delay: $trsn-d;
    -o-transition-delay: $trsn-d;
    -webkit-transition-delay: $trsn-d;
    transition-delay: $trsn-d;
}

//----------------------------------------------------------
//                   Animation
//----------------------------------------------------------
// Sets the animation of element
//
@mixin animation($anim) {
    -webkit-animation: $anim; -moz-animation: $anim;
    -ms-animation: $anim; -o-animation: $anim;
    animation: $anim;
}

//----------------------------------------------------------
//                     Box Shadow
//----------------------------------------------------------
// Sets the box shadow of element
//
@mixin box-shadow($box-shadow) {
    -webkit-box-shadow: $box-shadow;
    -moz-box-shadow: $box-shadow;
    box-shadow: $box-shadow;
}

//----------------------------------------------------------
//                        Button
//----------------------------------------------------------
//  Parameters:
//      @lp   - Left Padding of button
//      @rp   - Right Padding of button
//      @h:  - height of button
//      @lh - line-height of Button
@mixin btn($lp,$rp, $h, $lh){
    display: inline-block;
    padding: ($h - $lh)/2 $rp ($h - $lh)/2 $lp;
    line-height: $lh;
}

//----------------------------------------------------------
//                     Linear-gradient
//----------------------------------------------------------
/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}
/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
    @if is-direction($value) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
            to top          : bottom,
            to top right    : bottom left,
            to right top    : left bottom,
            to right        : left,
            to bottom right : top left,
            to right bottom : left top,
            to bottom       : top,
            to bottom left  : top right,
            to left bottom  : right top,
            to left         : right,
            to left top     : right bottom,
            to top left     : bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
}
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

//----------------------------------------------------------
//                     Radial-gradient
//----------------------------------------------------------
@mixin radial-gradient($start-colour, $start-position, $end-colour, $end-position) {
    background-color: $start-colour;
    background: -moz-radial-gradient(center, ellipse cover, $start-colour $start-position, $end-colour $end-position);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($start-position,$start-colour), color-stop($end-position,$end-colour));
    background: -webkit-radial-gradient(center, ellipse cover, $start-colour $start-position,$end-colour $end-position);
    background: -o-radial-gradient(center, ellipse cover, $start-colour $start-position,$end-colour $end-position);
    background: -ms-radial-gradient(center, ellipse cover, $start-colour $start-position,$end-colour $end-position);
    background: radial-gradient(ellipse at center, $start-colour $start-position,$end-colour $end-position);
}

//----------------------------------------------------------
//                     Filter blur
//----------------------------------------------------------
@mixin blur($px: 0) {
    -webkit-filter: blur(#{$px}px) !important;
    -ms-filter: blur(#{$px}px) !important;
    -moz-filter: blur(#{$px}px) !important;
    filter: blur(#{$px}px) !important;
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'blur\'><feGaussianBlur stdDeviation=\'#{$px}\' /></filter></svg>#blur");
    filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='#{$px}');
}

